(()=>{"use strict";var I,g={608:()=>{const I=window.wp.blocks,g=window.React,C=window.wp.i18n,A=window.wp.blockEditor,i=window.wp.components,t=window.wp.element;var e,o=Object.defineProperty,a=(I,g,C)=>((I,g,C)=>g in I?o(I,g,{enumerable:!0,configurable:!0,writable:!0,value:C}):I[g]=C)(I,"symbol"!=typeof g?g+"":g,C),l=class{requestAnimationFrame(I){return requestAnimationFrame(I)}cancelAnimationFrame(I){cancelAnimationFrame(I)}},n=class{constructor(){a(this,"_lastHandleId",0),a(this,"_lastImmediate",null)}requestAnimationFrame(I){return this._lastHandleId>=Number.MAX_SAFE_INTEGER&&(this._lastHandleId=0),this._lastHandleId+=1,this._lastImmediate=setImmediate((()=>{I(Date.now())})),this._lastHandleId}cancelAnimationFrame(I){this._lastImmediate&&clearImmediate(this._lastImmediate)}},s=class{constructor(){a(this,"_strategy"),this._strategy="function"==typeof requestAnimationFrame?new l:new n}requestAnimationFrame(I){return this._strategy.requestAnimationFrame(I)}cancelAnimationFrame(I){this._strategy.cancelAnimationFrame(I)}},d=typeof window<"u"&&typeof window.document<"u",c=new Uint8Array([80,75,3,4]),G=["v","ip","op","layers","fr","w","h"],h="0.30.2",Z="@lottiefiles/dotlottie-web",B=(e=typeof document<"u"?document.currentScript?.src:void 0,function(I={}){var g,C,A=I,i=new Promise(((I,A)=>{g=I,C=A})),t=Object.assign({},A),o="./this.program",a="";typeof document<"u"&&document.currentScript&&(a=document.currentScript.src),e&&(a=e),a=a.startsWith("blob:")?"":a.substr(0,a.replace(/[?#].*/,"").lastIndexOf("/")+1);var l,n=A.print||console.log.bind(console),s=A.printErr||console.error.bind(console);Object.assign(A,t),t=null,A.thisProgram&&(o=A.thisProgram),A.wasmBinary&&(l=A.wasmBinary);var d,c,G,h,Z,B,b,m,u,r=!1;function W(){var I=d.buffer;A.HEAP8=c=new Int8Array(I),A.HEAP16=h=new Int16Array(I),A.HEAPU8=G=new Uint8Array(I),A.HEAPU16=Z=new Uint16Array(I),A.HEAP32=B=new Int32Array(I),A.HEAPU32=b=new Uint32Array(I),A.HEAPF32=m=new Float32Array(I),A.HEAPF64=u=new Float64Array(I)}var K=[],Y=[],y=[];function p(){var I=A.preRun.shift();K.unshift(I)}var S=0,V=null;function w(I){throw A.onAbort?.(I),s(I="Aborted("+I+")"),r=!0,I=new WebAssembly.RuntimeError(I+". Build with -sASSERTIONS for more info."),C(I),I}var X,R=I=>I.startsWith("data:application/octet-stream;base64,");if(!R(X="DotLottiePlayer.wasm")){var H=X;X=A.locateFile?A.locateFile(H,a):a+H}function k(I){if(I==X&&l)return new Uint8Array(l);throw"both async and sync fetching of the wasm failed"}function F(I,g,C){return function(I){return l||"function"!=typeof fetch?Promise.resolve().then((()=>k(I))):fetch(I,{credentials:"same-origin"}).then((g=>{if(!g.ok)throw`failed to load wasm binary file at '${I}'`;return g.arrayBuffer()})).catch((()=>k(I)))}(I).then((I=>WebAssembly.instantiate(I,g))).then(C,(I=>{s(`failed to asynchronously prepare wasm: ${I}`),w(I)}))}var L=I=>{for(;0<I.length;)I.shift()(A)},N=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,v=(I,g,C)=>{var A=g+C;for(C=g;I[C]&&!(C>=A);)++C;if(16<C-g&&I.buffer&&N)return N.decode(I.subarray(g,C));for(A="";g<C;){var i=I[g++];if(128&i){var t=63&I[g++];if(192==(224&i))A+=String.fromCharCode((31&i)<<6|t);else{var e=63&I[g++];65536>(i=224==(240&i)?(15&i)<<12|t<<6|e:(7&i)<<18|t<<12|e<<6|63&I[g++])?A+=String.fromCharCode(i):(i-=65536,A+=String.fromCharCode(55296|i>>10,56320|1023&i))}}else A+=String.fromCharCode(i)}return A};class J{constructor(I){this.ya=I-24}}var D=I=>{for(var g=0,C=0;C<I.length;++C){var A=I.charCodeAt(C);127>=A?g++:2047>=A?g+=2:55296<=A&&57343>=A?(g+=4,++C):g+=3}return g},T=(I,g,C,A)=>{if(0<A){A=C+A-1;for(var i=0;i<I.length;++i){var t=I.charCodeAt(i);if(55296<=t&&57343>=t&&(t=65536+((1023&t)<<10)|1023&I.charCodeAt(++i)),127>=t){if(C>=A)break;g[C++]=t}else{if(2047>=t){if(C+1>=A)break;g[C++]=192|t>>6}else{if(65535>=t){if(C+2>=A)break;g[C++]=224|t>>12}else{if(C+3>=A)break;g[C++]=240|t>>18,g[C++]=128|t>>12&63}g[C++]=128|t>>6&63}g[C++]=128|63&t}}g[C]=0}},f={},M=I=>{for(;I.length;){var g=I.pop();I.pop()(g)}};function U(I){return this.fromWireType(b[I>>2])}var E,P,z,Q={},j={},O={},x=(I,g,C)=>{function A(g){if((g=C(g)).length!==I.length)throw new E("Mismatched type converter count");for(var A=0;A<I.length;++A)$(I[A],g[A])}I.forEach((function(I){O[I]=g}));var i=Array(g.length),t=[],e=0;g.forEach(((I,g)=>{j.hasOwnProperty(I)?i[g]=j[I]:(t.push(I),Q.hasOwnProperty(I)||(Q[I]=[]),Q[I].push((()=>{i[g]=j[I],++e===t.length&&A(i)})))})),0===t.length&&A(i)},_=I=>{for(var g="";G[I];)g+=P[G[I++]];return g};function $(I,g,C={}){if(!("argPackAdvance"in g))throw new TypeError("registerType registeredInstance requires argPackAdvance");return function(I,g,C={}){var A=g.name;if(!I)throw new z(`type "${A}" must have a positive integer typeid pointer`);if(j.hasOwnProperty(I)){if(C.ib)return;throw new z(`Cannot register type '${A}' twice`)}j[I]=g,delete O[I],Q.hasOwnProperty(I)&&(g=Q[I],delete Q[I],g.forEach((I=>I())))}(I,g,C)}var q,II=I=>{throw new z(I.ma.za.xa.name+" instance already deleted")},gI=!1,CI=()=>{},AI=(I,g,C)=>g===C?I:void 0===C.Ca||null===(I=AI(I,g,C.Ca))?null:C.ab(I),iI={},tI=[],eI=()=>{for(;tI.length;){var I=tI.pop();I.ma.Ka=!1,I.delete()}},oI={},aI=(I,g)=>{if(!g.za||!g.ya)throw new E("makeClassHandle requires ptr and ptrType");if(!!g.Da!=!!g.Aa)throw new E("Both smartPtrType and smartPtr must be specified");return g.count={value:1},lI(Object.create(I,{ma:{value:g,writable:!0}}))},lI=I=>typeof FinalizationRegistry>"u"?(lI=I=>I,I):(gI=new FinalizationRegistry((I=>{--(I=I.ma).count.value,0===I.count.value&&(I.Aa?I.Da.Fa(I.Aa):I.za.xa.Fa(I.ya))})),CI=I=>{gI.unregister(I)},(lI=I=>{var g=I.ma;return g.Aa&&gI.register(I,{ma:g},I),I})(I));function nI(){}var sI=(I,g)=>Object.defineProperty(g,"name",{value:I}),dI=(I,g,C)=>{if(void 0===I[g].Ba){var A=I[g];I[g]=function(...A){if(!I[g].Ba.hasOwnProperty(A.length))throw new z(`Function '${C}' called with an invalid number of arguments (${A.length}) - expects one of (${I[g].Ba})!`);return I[g].Ba[A.length].apply(this,A)},I[g].Ba=[],I[g].Ba[A.Oa]=A}},cI=(I,g,C)=>{if(A.hasOwnProperty(I)){if(void 0===C||void 0!==A[I].Ba&&void 0!==A[I].Ba[C])throw new z(`Cannot register public name '${I}' twice`);if(dI(A,I,I),A.hasOwnProperty(C))throw new z(`Cannot register multiple overloads of a function with the same number of arguments (${C})!`);A[I].Ba[C]=g}else A[I]=g,void 0!==C&&(A[I].vb=C)};function GI(I,g,C,A,i,t,e,o){this.name=I,this.constructor=g,this.La=C,this.Fa=A,this.Ca=i,this.cb=t,this.Na=e,this.ab=o,this.kb=[]}var hI=(I,g,C)=>{for(;g!==C;){if(!g.Na)throw new z(`Expected null or instance of ${C.name}, got an instance of ${g.name}`);I=g.Na(I),g=g.Ca}return I};function ZI(I,g){if(null===g){if(this.Ta)throw new z(`null is not a valid ${this.name}`);return 0}if(!g.ma)throw new z(`Cannot pass "${TI(g)}" as a ${this.name}`);if(!g.ma.ya)throw new z(`Cannot pass deleted object as a pointer of type ${this.name}`);return hI(g.ma.ya,g.ma.za.xa,this.xa)}function BI(I,g){if(null===g){if(this.Ta)throw new z(`null is not a valid ${this.name}`);if(this.Qa){var C=this.Ua();return null!==I&&I.push(this.Fa,C),C}return 0}if(!g||!g.ma)throw new z(`Cannot pass "${TI(g)}" as a ${this.name}`);if(!g.ma.ya)throw new z(`Cannot pass deleted object as a pointer of type ${this.name}`);if(!this.Pa&&g.ma.za.Pa)throw new z(`Cannot convert argument of type ${g.ma.Da?g.ma.Da.name:g.ma.za.name} to parameter type ${this.name}`);if(C=hI(g.ma.ya,g.ma.za.xa,this.xa),this.Qa){if(void 0===g.ma.Aa)throw new z("Passing raw pointer to smart pointer is illegal");switch(this.pb){case 0:if(g.ma.Da!==this)throw new z(`Cannot convert argument of type ${g.ma.Da?g.ma.Da.name:g.ma.za.name} to parameter type ${this.name}`);C=g.ma.Aa;break;case 1:C=g.ma.Aa;break;case 2:if(g.ma.Da===this)C=g.ma.Aa;else{var A=g.clone();C=this.lb(C,NI((()=>A.delete()))),null!==I&&I.push(this.Fa,C)}break;default:throw new z("Unsupporting sharing policy")}}return C}function bI(I,g){if(null===g){if(this.Ta)throw new z(`null is not a valid ${this.name}`);return 0}if(!g.ma)throw new z(`Cannot pass "${TI(g)}" as a ${this.name}`);if(!g.ma.ya)throw new z(`Cannot pass deleted object as a pointer of type ${this.name}`);if(g.ma.za.Pa)throw new z(`Cannot convert argument of type ${g.ma.za.name} to parameter type ${this.name}`);return hI(g.ma.ya,g.ma.za.xa,this.xa)}function mI(I,g,C,A,i,t,e,o,a,l,n){this.name=I,this.xa=g,this.Ta=C,this.Pa=A,this.Qa=i,this.jb=t,this.pb=e,this.Za=o,this.Ua=a,this.lb=l,this.Fa=n,i||void 0!==g.Ca?this.toWireType=BI:(this.toWireType=A?ZI:bI,this.Ea=null)}var uI,rI,WI=(I,g,C)=>{if(!A.hasOwnProperty(I))throw new E("Replacing nonexistent public symbol");void 0!==A[I].Ba&&void 0!==C?A[I].Ba[C]=g:(A[I]=g,A[I].Oa=C)},KI=(I,g)=>{var C=(I=_(I)).includes("j")?((I,g)=>(...C)=>((I,g,C=[])=>(I.includes("j")?(I=I.replace(/p/g,"i"),g=(0,A["dynCall_"+I])(g,...C)):g=uI.get(g)(...C),g))(I,g,C))(I,g):uI.get(g);if("function"!=typeof C)throw new z(`unknown function pointer with signature ${I}: ${g}`);return C},YI=I=>{I=ng(I);var g=_(I);return sg(I),g},yI=(I,g)=>{var C=[],A={};throw g.forEach((function I(g){A[g]||j[g]||(O[g]?O[g].forEach(I):(C.push(g),A[g]=!0))})),new rI(`${I}: `+C.map(YI).join([", "]))},pI=(I,g)=>{for(var C=[],A=0;A<I;A++)C.push(b[g+4*A>>2]);return C};function SI(I,g,C,A,i){var t=g.length;if(2>t)throw new z("argTypes array size mismatch! Must at least get return value and 'this' types!");var e=null!==g[1]&&null!==C,o=function(I){for(var g=1;g<I.length;++g)if(null!==I[g]&&void 0===I[g].Ea)return!0;return!1}(g),a="void"!==g[0].name,l=t-2,n=Array(l),s=[],d=[];return sI(I,(function(...C){if(C.length!==l)throw new z(`function ${I} called with ${C.length} arguments, expected ${l}`);if(d.length=0,s.length=e?2:1,s[0]=i,e){var t=g[1].toWireType(d,this);s[1]=t}for(var c=0;c<l;++c)n[c]=g[c+2].toWireType(d,C[c]),s.push(n[c]);if(C=A(...s),o)M(d);else for(c=e?1:2;c<g.length;c++){var G=1===c?t:n[c-2];null!==g[c].Ea&&g[c].Ea(G)}return a?g[0].fromWireType(C):void 0}))}var VI,wI,XI,RI=I=>{let g=(I=I.trim()).indexOf("(");return-1!==g?I.substr(0,g):I},HI=[],kI=[],FI=I=>{9<I&&0==--kI[I+1]&&(kI[I]=void 0,HI.push(I))},LI=I=>{if(!I)throw new z("Cannot use deleted val. handle = "+I);return kI[I]},NI=I=>{switch(I){case void 0:return 2;case null:return 4;case!0:return 6;case!1:return 8;default:let g=HI.pop()||kI.length;return kI[g]=I,kI[g+1]=1,g}},vI={name:"emscripten::val",fromWireType:I=>{var g=LI(I);return FI(I),g},toWireType:(I,g)=>NI(g),argPackAdvance:8,readValueFromPointer:U,Ea:null},JI=(I,g,C)=>{switch(g){case 1:return C?function(I){return this.fromWireType(c[I])}:function(I){return this.fromWireType(G[I])};case 2:return C?function(I){return this.fromWireType(h[I>>1])}:function(I){return this.fromWireType(Z[I>>1])};case 4:return C?function(I){return this.fromWireType(B[I>>2])}:function(I){return this.fromWireType(b[I>>2])};default:throw new TypeError(`invalid integer width (${g}): ${I}`)}},DI=(I,g)=>{var C=j[I];if(void 0===C)throw I=`${g} has unknown type ${YI(I)}`,new z(I);return C},TI=I=>{if(null===I)return"null";var g=typeof I;return"object"===g||"array"===g||"function"===g?I.toString():""+I},fI=(I,g)=>{switch(g){case 4:return function(I){return this.fromWireType(m[I>>2])};case 8:return function(I){return this.fromWireType(u[I>>3])};default:throw new TypeError(`invalid float width (${g}): ${I}`)}},MI=(I,g,C)=>{switch(g){case 1:return C?I=>c[I]:I=>G[I];case 2:return C?I=>h[I>>1]:I=>Z[I>>1];case 4:return C?I=>B[I>>2]:I=>b[I>>2];default:throw new TypeError(`invalid integer width (${g}): ${I}`)}},UI=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,EI=(I,g)=>{for(var C=I>>1,A=C+g/2;!(C>=A)&&Z[C];)++C;if(32<(C<<=1)-I&&UI)return UI.decode(G.subarray(I,C));for(C="",A=0;!(A>=g/2);++A){var i=h[I+2*A>>1];if(0==i)break;C+=String.fromCharCode(i)}return C},PI=(I,g,C)=>{if(C??(C=2147483647),2>C)return 0;var A=g;C=(C-=2)<2*I.length?C/2:I.length;for(var i=0;i<C;++i)h[g>>1]=I.charCodeAt(i),g+=2;return h[g>>1]=0,g-A},zI=I=>2*I.length,QI=(I,g)=>{for(var C=0,A="";!(C>=g/4);){var i=B[I+4*C>>2];if(0==i)break;++C,65536<=i?(i-=65536,A+=String.fromCharCode(55296|i>>10,56320|1023&i)):A+=String.fromCharCode(i)}return A},jI=(I,g,C)=>{if(C??(C=2147483647),4>C)return 0;var A=g;C=A+C-4;for(var i=0;i<I.length;++i){var t=I.charCodeAt(i);if(55296<=t&&57343>=t&&(t=65536+((1023&t)<<10)|1023&I.charCodeAt(++i)),B[g>>2]=t,(g+=4)+4>C)break}return B[g>>2]=0,g-A},OI=I=>{for(var g=0,C=0;C<I.length;++C){var A=I.charCodeAt(C);55296<=A&&57343>=A&&++C,g+=4}return g},xI=[],_I=Reflect.construct,$I={},qI=()=>{if(!VI){var I,g={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:o||"./this.program"};for(I in $I)void 0===$I[I]?delete g[I]:g[I]=$I[I];var C=[];for(I in g)C.push(`${I}=${g[I]}`);VI=C}return VI},Ig=[null,[],[]],gg=I=>(gg=(()=>{if("object"==typeof crypto&&"function"==typeof crypto.getRandomValues)return I=>crypto.getRandomValues(I);w("initRandomDevice")})())(I),Cg=I=>I%4==0&&(I%100!=0||I%400==0),Ag=[31,29,31,30,31,30,31,31,30,31,30,31],ig=[31,28,31,30,31,30,31,31,30,31,30,31];E=A.InternalError=class extends Error{constructor(I){super(I),this.name="InternalError"}};for(var tg=Array(256),eg=0;256>eg;++eg)tg[eg]=String.fromCharCode(eg);P=tg,z=A.BindingError=class extends Error{constructor(I){super(I),this.name="BindingError"}},Object.assign(nI.prototype,{isAliasOf:function(I){if(!(this instanceof nI&&I instanceof nI))return!1;var g=this.ma.za.xa,C=this.ma.ya;I.ma=I.ma;var A=I.ma.za.xa;for(I=I.ma.ya;g.Ca;)C=g.Na(C),g=g.Ca;for(;A.Ca;)I=A.Na(I),A=A.Ca;return g===A&&C===I},clone:function(){if(this.ma.ya||II(this),this.ma.Ma)return this.ma.count.value+=1,this;var I=lI,g=Object,C=g.create,A=Object.getPrototypeOf(this),i=this.ma;return(I=I(C.call(g,A,{ma:{value:{count:i.count,Ka:i.Ka,Ma:i.Ma,ya:i.ya,za:i.za,Aa:i.Aa,Da:i.Da}}}))).ma.count.value+=1,I.ma.Ka=!1,I},delete(){if(this.ma.ya||II(this),this.ma.Ka&&!this.ma.Ma)throw new z("Object already scheduled for deletion");CI(this);var I=this.ma;--I.count.value,0===I.count.value&&(I.Aa?I.Da.Fa(I.Aa):I.za.xa.Fa(I.ya)),this.ma.Ma||(this.ma.Aa=void 0,this.ma.ya=void 0)},isDeleted:function(){return!this.ma.ya},deleteLater:function(){if(this.ma.ya||II(this),this.ma.Ka&&!this.ma.Ma)throw new z("Object already scheduled for deletion");return tI.push(this),1===tI.length&&q&&q(eI),this.ma.Ka=!0,this}}),A.getInheritedInstanceCount=()=>Object.keys(oI).length,A.getLiveInheritedInstances=()=>{var I,g=[];for(I in oI)oI.hasOwnProperty(I)&&g.push(oI[I]);return g},A.flushPendingDeletes=eI,A.setDelayFunction=I=>{q=I,tI.length&&q&&q(eI)},Object.assign(mI.prototype,{eb(I){return this.Za&&(I=this.Za(I)),I},Xa(I){this.Fa?.(I)},argPackAdvance:8,readValueFromPointer:U,fromWireType:function(I){function g(){return this.Qa?aI(this.xa.La,{za:this.jb,ya:C,Da:this,Aa:I}):aI(this.xa.La,{za:this,ya:I})}var C=this.eb(I);if(!C)return this.Xa(I),null;var A=((I,g)=>{if(void 0===g)throw new z("ptr should not be undefined");for(;I.Ca;)g=I.Na(g),I=I.Ca;return oI[g]})(this.xa,C);if(void 0!==A)return 0===A.ma.count.value?(A.ma.ya=C,A.ma.Aa=I,A.clone()):(A=A.clone(),this.Xa(I),A);if(A=this.xa.cb(C),!(A=iI[A]))return g.call(this);A=this.Pa?A.$a:A.pointerType;var i=AI(C,this.xa,A.xa);return null===i?g.call(this):this.Qa?aI(A.xa.La,{za:A,ya:i,Da:this,Aa:I}):aI(A.xa.La,{za:A,ya:i})}}),rI=A.UnboundTypeError=(wI=Error,(XI=sI("UnboundTypeError",(function(I){this.name="UnboundTypeError",this.message=I,void 0!==(I=Error(I).stack)&&(this.stack=this.toString()+"\n"+I.replace(/^Error(:[^\n]*)?\n/,""))}))).prototype=Object.create(wI.prototype),XI.prototype.constructor=XI,XI.prototype.toString=function(){return void 0===this.message?this.name:`${this.name}: ${this.message}`},XI),kI.push(0,1,void 0,1,null,1,!0,1,!1,1),A.count_emval_handles=()=>kI.length/2-5-HI.length;var og={c:(I,g,C,A)=>{w(`Assertion failed: ${I?v(G,I):""}, at: `+[g?g?v(G,g):"":"unknown filename",C,A?A?v(G,A):"":"unknown function"])},m:(I,g,C)=>{var A=new J(I);throw b[A.ya+16>>2]=0,b[A.ya+4>>2]=g,b[A.ya+8>>2]=C,I},B:function(){return 0},P:()=>{},M:()=>{},R:function(){return 0},N:()=>{},A:function(){},O:()=>{},v:I=>{var g=f[I];delete f[I];var C=g.Ua,A=g.Fa,i=g.Ya,t=i.map((I=>I.hb)).concat(i.map((I=>I.nb)));x([I],t,(I=>{var t={};return i.forEach(((g,C)=>{var A=I[C],e=g.fb,o=g.gb,a=I[C+i.length],l=g.mb,n=g.ob;t[g.bb]={read:I=>A.fromWireType(e(o,I)),write:(I,g)=>{var C=[];l(n,I,a.toWireType(C,g)),M(C)}}})),[{name:g.name,fromWireType:I=>{var g,C={};for(g in t)C[g]=t[g].read(I);return A(I),C},toWireType:(I,g)=>{for(var i in t)if(!(i in g))throw new TypeError(`Missing field: "${i}"`);var e=C();for(i in t)t[i].write(e,g[i]);return null!==I&&I.push(A,e),e},argPackAdvance:8,readValueFromPointer:U,Ea:A}]}))},I:()=>{},Y:(I,g,C,A)=>{$(I,{name:g=_(g),fromWireType:function(I){return!!I},toWireType:function(I,g){return g?C:A},argPackAdvance:8,readValueFromPointer:function(I){return this.fromWireType(G[I])},Ea:null})},r:(I,g,C,A,i,t,e,o,a,l,n,s,d)=>{n=_(n),t=KI(i,t),o&&(o=KI(e,o)),l&&(l=KI(a,l)),d=KI(s,d);var c=(I=>{if(void 0===I)return"_unknown";var g=(I=I.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return 48<=g&&57>=g?`_${I}`:I})(n);cI(c,(function(){yI(`Cannot construct ${n} due to unbound types`,[A])})),x([I,g,C],A?[A]:[],(g=>{if(g=g[0],A)var C=g.xa,i=C.La;else i=nI.prototype;g=sI(n,(function(...I){if(Object.getPrototypeOf(this)!==e)throw new z("Use 'new' to construct "+n);if(void 0===s.Ha)throw new z(n+" has no accessible constructor");var g=s.Ha[I.length];if(void 0===g)throw new z(`Tried to invoke ctor of ${n} with invalid number of parameters (${I.length}) - expected (${Object.keys(s.Ha).toString()}) parameters instead!`);return g.apply(this,I)}));var e=Object.create(i,{constructor:{value:g}});g.prototype=e;var a,s=new GI(n,g,e,d,C,t,o,l);return s.Ca&&((a=s.Ca).Wa??(a.Wa=[]),s.Ca.Wa.push(s)),C=new mI(n,s,!0,!1,!1),a=new mI(n+"*",s,!1,!1,!1),i=new mI(n+" const*",s,!1,!0,!1),iI[I]={pointerType:a,$a:i},WI(c,g),[C,a,i]}))},q:(I,g,C,A,i,t)=>{var e=pI(g,C);i=KI(A,i),x([],[I],(I=>{var C=`constructor ${(I=I[0]).name}`;if(void 0===I.xa.Ha&&(I.xa.Ha=[]),void 0!==I.xa.Ha[g-1])throw new z(`Cannot register multiple constructors with identical number of parameters (${g-1}) for class '${I.name}'! Overload resolution is currently only performed using the parameter count, not actual type info!`);return I.xa.Ha[g-1]=()=>{yI(`Cannot construct ${I.name} due to unbound types`,e)},x([],e,(A=>(A.splice(1,0,null),I.xa.Ha[g-1]=SI(C,A,null,i,t),[]))),[]}))},f:(I,g,C,A,i,t,e,o)=>{var a=pI(C,A);g=_(g),g=RI(g),t=KI(i,t),x([],[I],(I=>{function A(){yI(`Cannot call ${i} due to unbound types`,a)}var i=`${(I=I[0]).name}.${g}`;g.startsWith("@@")&&(g=Symbol[g.substring(2)]),o&&I.xa.kb.push(g);var l=I.xa.La,n=l[g];return void 0===n||void 0===n.Ba&&n.className!==I.name&&n.Oa===C-2?(A.Oa=C-2,A.className=I.name,l[g]=A):(dI(l,g,i),l[g].Ba[C-2]=A),x([],a,(A=>(A=SI(i,A,I,t,e),void 0===l[g].Ba?(A.Oa=C-2,l[g]=A):l[g].Ba[C-2]=A,[]))),[]}))},X:I=>$(I,vI),x:(I,g,C,A)=>{function i(){}g=_(g),i.values={},$(I,{name:g,constructor:i,fromWireType:function(I){return this.constructor.values[I]},toWireType:(I,g)=>g.value,argPackAdvance:8,readValueFromPointer:JI(g,C,A),Ea:null}),cI(g,i)},k:(I,g,C)=>{var A=DI(I,"enum");g=_(g),I=A.constructor,A=Object.create(A.constructor.prototype,{value:{value:C},constructor:{value:sI(`${A.name}_${g}`,(function(){}))}}),I.values[C]=A,I[g]=A},C:(I,g,C)=>{$(I,{name:g=_(g),fromWireType:I=>I,toWireType:(I,g)=>g,argPackAdvance:8,readValueFromPointer:fI(g,C),Ea:null})},E:(I,g,C,A,i,t)=>{var e=pI(g,C);I=_(I),I=RI(I),i=KI(A,i),cI(I,(function(){yI(`Cannot call ${I} due to unbound types`,e)}),g-1),x([],e,(C=>(WI(I,SI(I,[C[0],null].concat(C.slice(1)),null,i,t),g-1),[])))},l:(I,g,C,A,i)=>{if(g=_(g),-1===i&&(i=4294967295),i=I=>I,0===A){var t=32-8*C;i=I=>I<<t>>>t}var e=g.includes("unsigned")?function(I,g){return g>>>0}:function(I,g){return g};$(I,{name:g,fromWireType:i,toWireType:e,argPackAdvance:8,readValueFromPointer:MI(g,C,0!==A),Ea:null})},g:(I,g,C)=>{function A(I){return new i(c.buffer,b[I+4>>2],b[I>>2])}var i=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][g];$(I,{name:C=_(C),fromWireType:A,argPackAdvance:8,readValueFromPointer:A},{ib:!0})},w:I=>{$(I,vI)},ca:(I,g,C,A,i,t,e,o,a,l,n,s)=>{C=_(C),t=KI(i,t),o=KI(e,o),l=KI(a,l),s=KI(n,s),x([I],[g],(I=>(I=I[0],[new mI(C,I.xa,!1,!1,!0,I,A,t,o,l,s)])))},D:(I,g)=>{var C="std::string"===(g=_(g));$(I,{name:g,fromWireType:function(I){var g=b[I>>2],A=I+4;if(C)for(var i=A,t=0;t<=g;++t){var e=A+t;if(t==g||0==G[e]){if(i=i?v(G,i,e-i):"",void 0===o)var o=i;else o+="\0",o+=i;i=e+1}}else{for(o=Array(g),t=0;t<g;++t)o[t]=String.fromCharCode(G[A+t]);o=o.join("")}return sg(I),o},toWireType:function(I,g){g instanceof ArrayBuffer&&(g=new Uint8Array(g));var A="string"==typeof g;if(!(A||g instanceof Uint8Array||g instanceof Uint8ClampedArray||g instanceof Int8Array))throw new z("Cannot pass non-string to std::string");var i=C&&A?D(g):g.length,t=lg(4+i+1),e=t+4;if(b[t>>2]=i,C&&A)T(g,G,e,i+1);else if(A)for(A=0;A<i;++A){var o=g.charCodeAt(A);if(255<o)throw sg(e),new z("String has UTF-16 code units that do not fit in 8 bits");G[e+A]=o}else for(A=0;A<i;++A)G[e+A]=g[A];return null!==I&&I.push(sg,t),t},argPackAdvance:8,readValueFromPointer:U,Ea(I){sg(I)}})},u:(I,g,C)=>{if(C=_(C),2===g)var A=EI,i=PI,t=zI,e=I=>Z[I>>1];else 4===g&&(A=QI,i=jI,t=OI,e=I=>b[I>>2]);$(I,{name:C,fromWireType:I=>{for(var C,i=b[I>>2],t=I+4,o=0;o<=i;++o){var a=I+4+o*g;(o==i||0==e(a))&&(t=A(t,a-t),void 0===C?C=t:(C+="\0",C+=t),t=a+g)}return sg(I),C},toWireType:(I,A)=>{if("string"!=typeof A)throw new z(`Cannot pass non-string to C++ string type ${C}`);var e=t(A),o=lg(4+e+g);return b[o>>2]=e/g,i(A,o+4,e+g),null!==I&&I.push(sg,o),o},argPackAdvance:8,readValueFromPointer:U,Ea(I){sg(I)}})},s:(I,g,C,A,i,t)=>{f[I]={name:_(g),Ua:KI(C,A),Fa:KI(i,t),Ya:[]}},j:(I,g,C,A,i,t,e,o,a,l)=>{f[I].Ya.push({bb:_(g),hb:C,fb:KI(A,i),gb:t,nb:e,mb:KI(o,a),ob:l})},Z:(I,g)=>{$(I,{ub:!0,name:g=_(g),argPackAdvance:0,fromWireType:()=>{},toWireType:()=>{}})},J:()=>{throw 1/0},aa:(I,g,C,A)=>(I=xI[I])(null,g=LI(g),C,A),F:FI,$:(I,g,C)=>{var A=((I,g)=>{for(var C=Array(I),A=0;A<I;++A)C[A]=DI(b[g+4*A>>2],"parameter "+A);return C})(I,g),i=A.shift();I--;var t=Array(I);return g=`methodCaller<(${A.map((I=>I.name)).join(", ")}) => ${i.name}>`,(I=>{var g=xI.length;return xI.push(I),g})(sI(g,((g,e,o,a)=>{for(var l=0,n=0;n<I;++n)t[n]=A[n].readValueFromPointer(a+l),l+=A[n].argPackAdvance;return e=1===C?_I(e,t):e.apply(g,t),g=[],e=i.toWireType(g,e),g.length&&(b[o>>2]=NI(g)),e})))},ba:I=>{9<I&&(kI[I+1]+=1)},_:I=>{var g=LI(I);M(g),FI(I)},o:(I,g)=>(I=(I=DI(I,"_emval_take_value")).readValueFromPointer(g),NI(I)),W:()=>{w("")},V:()=>performance.now(),L:I=>{var g=G.length;if(2147483648<(I>>>=0))return!1;for(var C=1;4>=C;C*=2){var A=g*(1+.2/C);A=Math.min(A,I+100663296);var i=Math;A=Math.max(I,A);I:{i=(i.min.call(i,2147483648,A+(65536-A%65536)%65536)-d.buffer.byteLength+65535)/65536;try{d.grow(i),W();var t=1;break I}catch{}t=void 0}if(t)return!0}return!1},S:(I,g)=>{var C=0;return qI().forEach(((A,i)=>{var t=g+C;for(i=b[I+4*i>>2]=t,t=0;t<A.length;++t)c[i++]=A.charCodeAt(t);c[i]=0,C+=A.length+1})),0},T:(I,g)=>{var C=qI();b[I>>2]=C.length;var A=0;return C.forEach((I=>A+=I.length+1)),b[g>>2]=A,0},t:()=>52,z:()=>52,H:function(){return 70},Q:(I,g,C,A)=>{for(var i=0,t=0;t<C;t++){var e=b[g>>2],o=b[g+4>>2];g+=8;for(var a=0;a<o;a++){var l=G[e+a],d=Ig[I];0===l||10===l?((1===I?n:s)(v(d,0)),d.length=0):d.push(l)}i+=o}return b[A>>2]=i,0},U:(I,g)=>(gg(G.subarray(I,I+g)),0),i:function(I,g){var C=Gg();try{return uI.get(I)(g)}catch(I){if(cg(C),I!==I+0)throw I;dg(1,0)}},d:function(I,g,C){var A=Gg();try{return uI.get(I)(g,C)}catch(I){if(cg(A),I!==I+0)throw I;dg(1,0)}},e:function(I,g,C,A){var i=Gg();try{return uI.get(I)(g,C,A)}catch(I){if(cg(i),I!==I+0)throw I;dg(1,0)}},p:function(I,g,C,A,i,t){var e=Gg();try{return uI.get(I)(g,C,A,i,t)}catch(I){if(cg(e),I!==I+0)throw I;dg(1,0)}},y:function(I){var g=Gg();try{uI.get(I)()}catch(I){if(cg(g),I!==I+0)throw I;dg(1,0)}},b:function(I,g){var C=Gg();try{uI.get(I)(g)}catch(I){if(cg(C),I!==I+0)throw I;dg(1,0)}},a:function(I,g,C){var A=Gg();try{uI.get(I)(g,C)}catch(I){if(cg(A),I!==I+0)throw I;dg(1,0)}},h:function(I,g,C,A){var i=Gg();try{uI.get(I)(g,C,A)}catch(I){if(cg(i),I!==I+0)throw I;dg(1,0)}},n:function(I,g,C,A,i){var t=Gg();try{uI.get(I)(g,C,A,i)}catch(I){if(cg(t),I!==I+0)throw I;dg(1,0)}},G:function(I,g,C,A,i,t){var e=Gg();try{Zg(I,g,C,A,i,t)}catch(I){if(cg(e),I!==I+0)throw I;dg(1,0)}},K:(I,g,C,A)=>((I,g,C,A)=>{function i(I,g,C){for(I="number"==typeof I?I.toString():I||"";I.length<g;)I=C[0]+I;return I}function t(I,g){return i(I,g,"0")}function e(I,g){function C(I){return 0>I?-1:0<I?1:0}var A;return 0===(A=C(I.getFullYear()-g.getFullYear()))&&0===(A=C(I.getMonth()-g.getMonth()))&&(A=C(I.getDate()-g.getDate())),A}function o(I){switch(I.getDay()){case 0:return new Date(I.getFullYear()-1,11,29);case 1:return I;case 2:return new Date(I.getFullYear(),0,3);case 3:return new Date(I.getFullYear(),0,2);case 4:return new Date(I.getFullYear(),0,1);case 5:return new Date(I.getFullYear()-1,11,31);case 6:return new Date(I.getFullYear()-1,11,30)}}function a(I){var g=I.Ia;for(I=new Date(new Date(I.Ja+1900,0,1).getTime());0<g;){var C=I.getMonth(),A=(Cg(I.getFullYear())?Ag:ig)[C];if(!(g>A-I.getDate())){I.setDate(I.getDate()+g);break}g-=A-I.getDate()+1,I.setDate(1),11>C?I.setMonth(C+1):(I.setMonth(0),I.setFullYear(I.getFullYear()+1))}return C=new Date(I.getFullYear()+1,0,4),g=o(new Date(I.getFullYear(),0,4)),C=o(C),0>=e(g,I)?0>=e(C,I)?I.getFullYear()+1:I.getFullYear():I.getFullYear()-1}var l=b[A+40>>2];for(var n in A={sb:B[A>>2],rb:B[A+4>>2],Ra:B[A+8>>2],Va:B[A+12>>2],Sa:B[A+16>>2],Ja:B[A+20>>2],Ga:B[A+24>>2],Ia:B[A+28>>2],wb:B[A+32>>2],qb:B[A+36>>2],tb:l&&l?v(G,l):""},C=C?v(G,C):"",l={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"})C=C.replace(new RegExp(n,"g"),l[n]);var s="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),d="January February March April May June July August September October November December".split(" ");for(n in l={"%a":I=>s[I.Ga].substring(0,3),"%A":I=>s[I.Ga],"%b":I=>d[I.Sa].substring(0,3),"%B":I=>d[I.Sa],"%C":I=>t((I.Ja+1900)/100|0,2),"%d":I=>t(I.Va,2),"%e":I=>i(I.Va,2," "),"%g":I=>a(I).toString().substring(2),"%G":a,"%H":I=>t(I.Ra,2),"%I":I=>(0==(I=I.Ra)?I=12:12<I&&(I-=12),t(I,2)),"%j":I=>{for(var g=0,C=0;C<=I.Sa-1;g+=(Cg(I.Ja+1900)?Ag:ig)[C++]);return t(I.Va+g,3)},"%m":I=>t(I.Sa+1,2),"%M":I=>t(I.rb,2),"%n":()=>"\n","%p":I=>0<=I.Ra&&12>I.Ra?"AM":"PM","%S":I=>t(I.sb,2),"%t":()=>"\t","%u":I=>I.Ga||7,"%U":I=>t(Math.floor((I.Ia+7-I.Ga)/7),2),"%V":I=>{var g=Math.floor((I.Ia+7-(I.Ga+6)%7)/7);if(2>=(I.Ga+371-I.Ia-2)%7&&g++,g)53==g&&(4==(C=(I.Ga+371-I.Ia)%7)||3==C&&Cg(I.Ja)||(g=1));else{g=52;var C=(I.Ga+7-I.Ia-1)%7;(4==C||5==C&&Cg(I.Ja%400-1))&&g++}return t(g,2)},"%w":I=>I.Ga,"%W":I=>t(Math.floor((I.Ia+7-(I.Ga+6)%7)/7),2),"%y":I=>(I.Ja+1900).toString().substring(2),"%Y":I=>I.Ja+1900,"%z":I=>(0<=(I=I.qb)?"+":"-")+("0000"+((I=Math.abs(I)/60)/60*100+I%60)).slice(-4),"%Z":I=>I.tb,"%%":()=>"%"},C=C.replace(/%%/g,"\0\0"),l)C.includes(n)&&(C=C.replace(new RegExp(n,"g"),l[n](A)));return n=function(I){var g=Array(D(I)+1);return T(I,g,0,g.length),g}(C=C.replace(/\0\0/g,"%")),n.length>g?0:(c.set(n,I),n.length-1)})(I,g,C,A)},ag=function(){function I(I){return ag=I.exports,d=ag.da,W(),uI=ag.ha,Y.unshift(ag.ea),S--,A.monitorRunDependencies?.(S),0==S&&V&&(I=V,V=null,I()),ag}var g={a:og};if(S++,A.monitorRunDependencies?.(S),A.instantiateWasm)try{return A.instantiateWasm(g,I)}catch(I){s(`Module.instantiateWasm callback failed with error: ${I}`),C(I)}return function(I,g){var C=X;return l||"function"!=typeof WebAssembly.instantiateStreaming||R(C)||"function"!=typeof fetch?F(C,I,g):fetch(C,{credentials:"same-origin"}).then((A=>WebAssembly.instantiateStreaming(A,I).then(g,(function(A){return s(`wasm streaming compile failed: ${A}`),s("falling back to ArrayBuffer instantiation"),F(C,I,g)}))))}(g,(function(g){I(g.instance)})).catch(C),{}}(),lg=I=>(lg=ag.fa)(I),ng=I=>(ng=ag.ga)(I),sg=I=>(sg=ag.ia)(I),dg=(I,g)=>(dg=ag.ja)(I,g),cg=I=>(cg=ag.ka)(I),Gg=()=>(Gg=ag.la)();A.dynCall_iijj=(I,g,C,i,t,e)=>(A.dynCall_iijj=ag.na)(I,g,C,i,t,e),A.dynCall_vijj=(I,g,C,i,t,e)=>(A.dynCall_vijj=ag.oa)(I,g,C,i,t,e),A.dynCall_jiii=(I,g,C,i)=>(A.dynCall_jiii=ag.pa)(I,g,C,i),A.dynCall_jii=(I,g,C)=>(A.dynCall_jii=ag.qa)(I,g,C);var hg,Zg=A.dynCall_viiij=(I,g,C,i,t,e)=>(Zg=A.dynCall_viiij=ag.ra)(I,g,C,i,t,e);function Bg(){function I(){if(!hg&&(hg=!0,A.calledRun=!0,!r)){if(L(Y),g(A),A.onRuntimeInitialized&&A.onRuntimeInitialized(),A.postRun)for("function"==typeof A.postRun&&(A.postRun=[A.postRun]);A.postRun.length;){var I=A.postRun.shift();y.unshift(I)}L(y)}}if(!(0<S)){if(A.preRun)for("function"==typeof A.preRun&&(A.preRun=[A.preRun]);A.preRun.length;)p();L(K),0<S||(A.setStatus?(A.setStatus("Running..."),setTimeout((function(){setTimeout((function(){A.setStatus("")}),1),I()}),1)):I())}}if(A.dynCall_jiji=(I,g,C,i,t)=>(A.dynCall_jiji=ag.sa)(I,g,C,i,t),A.dynCall_viijii=(I,g,C,i,t,e,o)=>(A.dynCall_viijii=ag.ta)(I,g,C,i,t,e,o),A.dynCall_iiiiij=(I,g,C,i,t,e,o)=>(A.dynCall_iiiiij=ag.ua)(I,g,C,i,t,e,o),A.dynCall_iiiiijj=(I,g,C,i,t,e,o,a,l)=>(A.dynCall_iiiiijj=ag.va)(I,g,C,i,t,e,o,a,l),A.dynCall_iiiiiijj=(I,g,C,i,t,e,o,a,l,n)=>(A.dynCall_iiiiiijj=ag.wa)(I,g,C,i,t,e,o,a,l,n),V=function I(){hg||Bg(),hg||(V=I)},A.preInit)for("function"==typeof A.preInit&&(A.preInit=[A.preInit]);0<A.preInit.length;)A.preInit.pop()();return Bg(),i}),b=class{constructor(){throw new Error("RendererLoader is a static class and cannot be instantiated.")}static async _tryLoad(I){return await B({locateFile:()=>I})}static async _loadWithBackup(){return this._ModulePromise||(this._ModulePromise=this._tryLoad(this._wasmURL).catch((async I=>{let g=`https://unpkg.com/${Z}@${h}/dist/dotlottie-player.wasm`;console.warn(`Primary WASM load failed from ${this._wasmURL}. Error: ${I.message}`),console.warn(`Attempting to load WASM from backup URL: ${g}`);try{return await this._tryLoad(g)}catch(g){throw console.error(`Primary WASM URL failed: ${I.message}`),console.error(`Backup WASM URL failed: ${g.message}`),new Error("WASM loading failed from all sources.")}}))),this._ModulePromise}static async load(){return this._loadWithBackup()}static setWasmUrl(I){this._wasmURL=I,this._ModulePromise=null}};a(b,"_ModulePromise",null),a(b,"_wasmURL",`https://cdn.jsdelivr.net/npm/${Z}@${h}/dist/dotlottie-player.wasm`);var m=class{constructor(){a(this,"_eventListeners",new Map)}addEventListener(I,g){let C=this._eventListeners.get(I);C||(C=new Set,this._eventListeners.set(I,C)),C.add(g)}removeEventListener(I,g){let C=this._eventListeners.get(I);C&&(g?(C.delete(g),0===C.size&&this._eventListeners.delete(I)):this._eventListeners.delete(I))}dispatch(I){this._eventListeners.get(I.type)?.forEach((g=>g(I)))}removeAllEventListeners(){this._eventListeners.clear()}};function u(I){if(!function(I){return/^#([\da-f]{6}|[\da-f]{8})$/iu.test(I)}(I))return 0;let g=I.replace("#","");return g=6===g.length?`${g}ff`:g,parseInt(g,16)}function r(I){if(I.byteLength<4)return!1;let g=new Uint8Array(I.slice(0,c.byteLength));for(let I=0;I<c.length;I+=1)if(c[I]!==g[I])return!1;return!0}function W(I){return G.every((g=>Object.prototype.hasOwnProperty.call(I,g)))}function K(I){if("string"!=typeof I)return W(I);try{return W(JSON.parse(I))}catch{return!1}}var Y=(I,g)=>"reverse"===I?g.Mode.Reverse:"bounce"===I?g.Mode.Bounce:"reverse-bounce"===I?g.Mode.ReverseBounce:g.Mode.Forward,y=(I,g)=>"contain"===I?g.Fit.Contain:"cover"===I?g.Fit.Cover:"fill"===I?g.Fit.Fill:"fit-height"===I?g.Fit.FitHeight:"fit-width"===I?g.Fit.FitWidth:g.Fit.None,p=(I,g)=>{let C=new g.VectorFloat;return C.push_back(I[0]),C.push_back(I[1]),C},S=(I,g)=>{let C=new g.VectorFloat;return 2!==I.length||(C.push_back(I[0]),C.push_back(I[1])),C},V=class I{constructor(g){a(this,"_canvas"),a(this,"_context",null),a(this,"_eventManager"),a(this,"_animationFrameId",null),a(this,"_frameManager"),a(this,"_dotLottieCore",null),a(this,"_renderConfig",{}),a(this,"_isFrozen",!1),a(this,"_backgroundColor",null),a(this,"_pointerUpMethod"),a(this,"_pointerDownMethod"),a(this,"_pointerMoveMethod"),a(this,"_pointerEnterMethod"),a(this,"_pointerExitMethod"),a(this,"_onCompleteMethod"),this._canvas=g.canvas,this._context=this._canvas.getContext("2d"),this._eventManager=new m,this._frameManager=new s,this._renderConfig=g.renderConfig??{},b.load().then((C=>{I._wasmModule=C,this._dotLottieCore=new C.DotLottiePlayer({autoplay:g.autoplay??!1,backgroundColor:0,loopAnimation:g.loop??!1,mode:Y(g.mode??"forward",C),segment:S(g.segment??[],C),speed:g.speed??1,useFrameInterpolation:g.useFrameInterpolation??!0,marker:g.marker??"",layout:g.layout?{align:p(g.layout.align,C),fit:y(g.layout.fit,C)}:C.createDefaultLayout()}),this._eventManager.dispatch({type:"ready"}),g.data?this._loadFromData(g.data):g.src&&this._loadFromSrc(g.src),g.backgroundColor&&this.setBackgroundColor(g.backgroundColor)})).catch((I=>{this._eventManager.dispatch({type:"loadError",error:new Error(`Failed to load wasm module: ${I}`)})})),this._pointerUpMethod=this._onPointerUp.bind(this),this._pointerDownMethod=this._onPointerDown.bind(this),this._pointerMoveMethod=this._onPointerMove.bind(this),this._pointerEnterMethod=this._onPointerEnter.bind(this),this._pointerExitMethod=this._onPointerLeave.bind(this),this._onCompleteMethod=this._onComplete.bind(this)}_dispatchError(I){console.error(I),this._eventManager.dispatch({type:"loadError",error:new Error(I)})}async _fetchData(I){let g=await fetch(I);if(!g.ok)throw new Error(`Failed to fetch animation data from URL: ${I}. ${g.status}: ${g.statusText}`);let C=await g.arrayBuffer();return r(C)?C:(new TextDecoder).decode(C)}_loadFromData(I){if(null===this._dotLottieCore)return;let g=this._canvas.width,C=this._canvas.height,A=!1;if("string"==typeof I){if(!K(I))return void this._dispatchError("Invalid Lottie JSON string: The provided string does not conform to the Lottie JSON format.");A=this._dotLottieCore.loadAnimationData(I,g,C)}else if(I instanceof ArrayBuffer){if(!r(I))return void this._dispatchError("Invalid dotLottie ArrayBuffer: The provided ArrayBuffer does not conform to the dotLottie format.");A=this._dotLottieCore.loadDotLottieData(I,g,C)}else{if("object"!=typeof I)return void this._dispatchError("Unsupported data type for animation data. Expected: \n          - string (Lottie JSON),\n          - ArrayBuffer (dotLottie),\n          - object (Lottie JSON). \n          Received: "+typeof I);if(!K(I))return void this._dispatchError("Invalid Lottie JSON object: The provided object does not conform to the Lottie JSON format.");A=this._dotLottieCore.loadAnimationData(JSON.stringify(I),g,C)}A?(this._eventManager.dispatch({type:"load"}),d&&this.resize(),this._eventManager.dispatch({type:"frame",currentFrame:this._dotLottieCore.currentFrame()}),this._render(),this._dotLottieCore.config().autoplay&&(this._dotLottieCore.play(),this._dotLottieCore.isPlaying()?(this._eventManager.dispatch({type:"play"}),this._animationFrameId=this._frameManager.requestAnimationFrame(this._draw.bind(this))):console.error("something went wrong, the animation was suppose to autoplay"))):this._dispatchError("Failed to load animation data")}_loadFromSrc(I){this._fetchData(I).then((I=>this._loadFromData(I))).catch((g=>this._dispatchError(`Failed to load animation data from URL: ${I}. ${g}`)))}get activeAnimationId(){return this._dotLottieCore?.activeAnimationId()}get activeThemeId(){return this._dotLottieCore?.activeThemeId()}get layout(){let g=this._dotLottieCore?.config().layout;if(g)return{align:[g.align.get(0),g.align.get(1)],fit:(()=>{switch(g.fit){case I._wasmModule?.Fit.Contain:return"contain";case I._wasmModule?.Fit.Cover:return"cover";case I._wasmModule?.Fit.Fill:return"fill";case I._wasmModule?.Fit.FitHeight:return"fit-height";case I._wasmModule?.Fit.FitWidth:return"fit-width";case I._wasmModule?.Fit.None:return"none";default:return"contain"}})()}}get marker(){return this._dotLottieCore?.config().marker}get manifest(){try{let I=this._dotLottieCore?.manifestString();if(null===this._dotLottieCore||!I)return null;let g=JSON.parse(I);return 0===Object.keys(g).length?null:g}catch{return null}}get renderConfig(){return this._renderConfig}get segment(){let I=this._dotLottieCore?.config().segment;if(I&&2===I.size())return[I.get(0),I.get(1)]}get loop(){return this._dotLottieCore?.config().loopAnimation??!1}get mode(){let g=this._dotLottieCore?.config().mode;return g===I._wasmModule?.Mode.Reverse?"reverse":g===I._wasmModule?.Mode.Bounce?"bounce":g===I._wasmModule?.Mode.ReverseBounce?"reverse-bounce":"forward"}get isFrozen(){return this._isFrozen}get backgroundColor(){return this._backgroundColor??""}get autoplay(){return this._dotLottieCore?.config().autoplay??!1}get useFrameInterpolation(){return this._dotLottieCore?.config().useFrameInterpolation??!1}get speed(){return this._dotLottieCore?.config().speed??0}get isReady(){return null!==this._dotLottieCore}get isLoaded(){return this._dotLottieCore?.isLoaded()??!1}get isPlaying(){return this._dotLottieCore?.isPlaying()??!1}get isPaused(){return this._dotLottieCore?.isPaused()??!1}get isStopped(){return this._dotLottieCore?.isStopped()??!1}get currentFrame(){return this._dotLottieCore?.currentFrame()??0}get loopCount(){return this._dotLottieCore?.loopCount()??0}get totalFrames(){return this._dotLottieCore?.totalFrames()??0}get duration(){return this._dotLottieCore?.duration()??0}get segmentDuration(){return this._dotLottieCore?.segmentDuration()??0}get canvas(){return this._canvas}load(g){null===this._dotLottieCore||null===I._wasmModule||(this._dotLottieCore.setConfig({autoplay:g.autoplay??!1,backgroundColor:0,loopAnimation:g.loop??!1,mode:Y(g.mode??"forward",I._wasmModule),segment:S(g.segment??[],I._wasmModule),speed:g.speed??1,useFrameInterpolation:g.useFrameInterpolation??!0,marker:g.marker??"",layout:g.layout?{align:p(g.layout.align,I._wasmModule),fit:y(g.layout.fit,I._wasmModule)}:I._wasmModule.createDefaultLayout()}),g.data?this._loadFromData(g.data):g.src&&this._loadFromSrc(g.src),this.setBackgroundColor(g.backgroundColor??""))}_render(){if(null===this._dotLottieCore||null===this._context)return!1;if(this._dotLottieCore.render()){let I=this._dotLottieCore.buffer(),g=new Uint8ClampedArray(I,0,this._canvas.width*this._canvas.height*4),C=null;return typeof ImageData>"u"?(C=this._context.createImageData(this._canvas.width,this._canvas.height),C.data.set(g)):C=new ImageData(g,this._canvas.width,this._canvas.height),this._context.putImageData(C,0,0),this._eventManager.dispatch({type:"render",currentFrame:this._dotLottieCore.currentFrame()}),!0}return!1}_draw(){if(null===this._dotLottieCore||null===this._context||!this._dotLottieCore.isPlaying())return;let I=this._dotLottieCore.requestFrame();this._dotLottieCore.setFrame(I)&&(this._eventManager.dispatch({type:"frame",currentFrame:this._dotLottieCore.currentFrame()}),this._render()&&this._dotLottieCore.isComplete()&&(this._dotLottieCore.config().loopAnimation?this._eventManager.dispatch({type:"loop",loopCount:this._dotLottieCore.loopCount()}):this._eventManager.dispatch({type:"complete"}))),this._animationFrameId=this._frameManager.requestAnimationFrame(this._draw.bind(this))}play(){null!==this._dotLottieCore&&(this._dotLottieCore.play()||this._dotLottieCore.isPlaying())&&(this._isFrozen=!1,this._eventManager.dispatch({type:"play"}),this._animationFrameId=this._frameManager.requestAnimationFrame(this._draw.bind(this)))}pause(){null!==this._dotLottieCore&&(this._dotLottieCore.pause()||this._dotLottieCore.isPaused())&&this._eventManager.dispatch({type:"pause"})}stop(){null!==this._dotLottieCore&&this._dotLottieCore.stop()&&(this._eventManager.dispatch({type:"frame",currentFrame:this._dotLottieCore.currentFrame()}),this._render(),this._eventManager.dispatch({type:"stop"}))}setFrame(I){null===this._dotLottieCore||I<0||I>this._dotLottieCore.totalFrames()||this._dotLottieCore.seek(I)&&(this._eventManager.dispatch({type:"frame",currentFrame:this._dotLottieCore.currentFrame()}),this._render())}setSpeed(I){null!==this._dotLottieCore&&this._dotLottieCore.setConfig({...this._dotLottieCore.config(),speed:I})}setBackgroundColor(I){null!==this._dotLottieCore&&(d&&this._canvas instanceof HTMLCanvasElement?this._canvas.style.backgroundColor=I:this._dotLottieCore.setConfig({...this._dotLottieCore.config(),backgroundColor:u(I)}),this._backgroundColor=I)}setLoop(I){null!==this._dotLottieCore&&this._dotLottieCore.setConfig({...this._dotLottieCore.config(),loopAnimation:I})}setUseFrameInterpolation(I){null!==this._dotLottieCore&&this._dotLottieCore.setConfig({...this._dotLottieCore.config(),useFrameInterpolation:I})}addEventListener(I,g){this._eventManager.addEventListener(I,g)}removeEventListener(I,g){this._eventManager.removeEventListener(I,g)}destroy(){this._dotLottieCore?.delete(),this._dotLottieCore=null,this._context=null,this._eventManager.dispatch({type:"destroy"}),this._eventManager.removeAllEventListeners(),this._cleanupStateMachineListeners()}freeze(){null!==this._animationFrameId&&(this._frameManager.cancelAnimationFrame(this._animationFrameId),this._animationFrameId=null,this._isFrozen=!0,this._eventManager.dispatch({type:"freeze"}))}unfreeze(){null===this._animationFrameId&&(this._animationFrameId=this._frameManager.requestAnimationFrame(this._draw.bind(this)),this._isFrozen=!1,this._eventManager.dispatch({type:"unfreeze"}))}resize(){if(d&&this._canvas instanceof HTMLCanvasElement){let I=this._renderConfig.devicePixelRatio||window.devicePixelRatio||1,{height:g,width:C}=this._canvas.getBoundingClientRect();this._canvas.width=C*I,this._canvas.height=g*I}this._dotLottieCore?.resize(this._canvas.width,this._canvas.height)&&this._render()}setSegment(g,C){null===this._dotLottieCore||null===I._wasmModule||this._dotLottieCore.setConfig({...this._dotLottieCore.config(),segment:S([g,C],I._wasmModule)})}setMode(g){null===this._dotLottieCore||null===I._wasmModule||this._dotLottieCore.setConfig({...this._dotLottieCore.config(),mode:Y(g,I._wasmModule)})}setRenderConfig(I){this._renderConfig=I}loadAnimation(I){null!==this._dotLottieCore&&this._dotLottieCore.activeAnimationId()!==I&&(this._dotLottieCore.loadAnimation(I,this._canvas.width,this._canvas.height)?(this._eventManager.dispatch({type:"load"}),this.resize()):this._eventManager.dispatch({type:"loadError",error:new Error(`Failed to animation :${I}`)}))}setMarker(I){null!==this._dotLottieCore&&this._dotLottieCore.setConfig({...this._dotLottieCore.config(),marker:I})}markers(){let I=this._dotLottieCore?.markers();if(I){let g=[];for(let C=0;C<I.size();C+=1){let A=I.get(C);g.push({name:A.name,time:A.time,duration:A.duration})}return g}return[]}loadTheme(I){if(null===this._dotLottieCore)return!1;let g=this._dotLottieCore.loadTheme(I);return this._render(),g}loadThemeData(I){if(null===this._dotLottieCore)return!1;let g=this._dotLottieCore.loadThemeData(I);return this._render(),g}setLayout(g){null===this._dotLottieCore||null===I._wasmModule||this._dotLottieCore.setConfig({...this._dotLottieCore.config(),layout:{align:p(g.align,I._wasmModule),fit:y(g.fit,I._wasmModule)}})}setViewport(I,g,C,A){return null!==this._dotLottieCore&&this._dotLottieCore.setViewport(I,g,C,A)}static setWasmUrl(I){b.setWasmUrl(I)}loadStateMachine(I){return this._dotLottieCore?.loadStateMachine(I)??!1}startStateMachine(){let I=this._dotLottieCore?.startStateMachine()??!1;return I&&this._setupStateMachineListeners(),I}stopStateMachine(){let I=this._dotLottieCore?.stopStateMachine()??!1;return I&&this._cleanupStateMachineListeners(),I}_getPointerPosition(I){let g=this._canvas.getBoundingClientRect(),C=this._canvas.width/g.width,A=this._canvas.height/g.height,i=this._renderConfig.devicePixelRatio||window.devicePixelRatio||1;return{x:(I.clientX-g.left)*C/i,y:(I.clientY-g.top)*A/i}}_onPointerUp(I){let{x:g,y:C}=this._getPointerPosition(I);this.postStateMachineEvent(`OnPointerUp: ${g} ${C}`)}_onPointerDown(I){let{x:g,y:C}=this._getPointerPosition(I);this.postStateMachineEvent(`OnPointerDown: ${g} ${C}`)}_onPointerMove(I){let{x:g,y:C}=this._getPointerPosition(I);this.postStateMachineEvent(`OnPointerMove: ${g} ${C}`)}_onPointerEnter(I){let{x:g,y:C}=this._getPointerPosition(I);this.postStateMachineEvent(`OnPointerEnter: ${g} ${C}`)}_onPointerLeave(I){let{x:g,y:C}=this._getPointerPosition(I);this.postStateMachineEvent(`OnPointerExit: ${g} ${C}`)}_onComplete(){this.postStateMachineEvent("OnComplete")}postStateMachineEvent(I){let g=this._dotLottieCore?.postEventPayload(I)??1;return 2===g?this.play():3===g?this.pause():4===g&&this._render(),g}getStateMachineListeners(){if(!this._dotLottieCore)return[];let I=this._dotLottieCore.stateMachineFrameworkSetup(),g=[];for(let C=0;C<I.size();C+=1)g.push(I.get(C));return g}_setupStateMachineListeners(){if(d&&this._canvas instanceof HTMLCanvasElement&&null!==this._dotLottieCore&&this.isLoaded){let I=this.getStateMachineListeners();I.includes("PointerUp")&&this._canvas.addEventListener("pointerup",this._pointerUpMethod),I.includes("PointerDown")&&this._canvas.addEventListener("pointerdown",this._pointerDownMethod),I.includes("PointerMove")&&this._canvas.addEventListener("pointermove",this._pointerMoveMethod),I.includes("PointerEnter")&&this._canvas.addEventListener("pointerenter",this._pointerEnterMethod),I.includes("PointerExit")&&this._canvas.addEventListener("pointerleave",this._pointerExitMethod),I.includes("Complete")&&this.addEventListener("complete",this._onCompleteMethod)}}_cleanupStateMachineListeners(){d&&this._canvas instanceof HTMLCanvasElement&&(this._canvas.removeEventListener("pointerup",this._pointerUpMethod),this._canvas.removeEventListener("pointerdown",this._pointerDownMethod),this._canvas.removeEventListener("pointermove",this._pointerMoveMethod),this._canvas.removeEventListener("pointerenter",this._pointerEnterMethod),this._canvas.removeEventListener("pointerleave",this._pointerExitMethod),this.removeEventListener("complete",this._onCompleteMethod))}loadStateMachineData(I){return this._dotLottieCore?.loadStateMachineData(I)??!1}animationSize(){return{width:this._dotLottieCore?.animationSize().get(0)??0,height:this._dotLottieCore?.animationSize().get(1)??0}}setStateMachineBooleanContext(I,g){return this._dotLottieCore?.setStateMachineBooleanContext(I,g)??!1}setStateMachineNumericContext(I,g){return this._dotLottieCore?.setStateMachineNumericContext(I,g)??!1}setStateMachineStringContext(I,g){return this._dotLottieCore?.setStateMachineStringContext(I,g)??!1}};a(V,"_wasmModule",null);var w=V,X=class extends Worker{constructor(){super("data:application/javascript;base64,",{type:"classic"})}};function R(I){if(I instanceof OffscreenCanvas)return{width:I.width,height:I.height};let{height:g,width:C}=I.getBoundingClientRect();return{width:C*window.devicePixelRatio,height:g*window.devicePixelRatio}}function H(){return Date.now().toString(36)+Math.random().toString(36).substr(2,9)}var k=class I{constructor(g){a(this,"_eventManager",new m),a(this,"_id"),a(this,"_worker"),a(this,"_canvas"),a(this,"_dotLottieInstanceState",{markers:[],autoplay:!1,backgroundColor:"",currentFrame:0,duration:0,loop:!1,mode:"forward",segment:[0,0],segmentDuration:0,speed:1,totalFrames:0,isLoaded:!1,isPlaying:!1,isPaused:!1,isStopped:!0,isFrozen:!1,useFrameInterpolation:!1,renderConfig:{devicePixelRatio:window.devicePixelRatio},activeAnimationId:"",activeThemeId:"",layout:void 0,marker:void 0,isReady:!1,manifest:null}),a(this,"_created",!1),a(this,"_pointerUpMethod"),a(this,"_pointerDownMethod"),a(this,"_pointerMoveMethod"),a(this,"_pointerEnterMethod"),a(this,"_pointerExitMethod"),a(this,"_onCompleteMethod"),this._canvas=g.canvas,this._id=`dotlottie-${H()}`;let C=g.workerId||"defaultWorker";this._worker=I._workerManager.getWorker(C),I._workerManager.assignAnimationToWorker(this._id,C),I._wasmUrl&&this._sendMessage("setWasmUrl",{url:I._wasmUrl}),this._create(g),this._worker.addEventListener("message",this._handleWorkerEvent.bind(this)),this._pointerUpMethod=this._onPointerUp.bind(this),this._pointerDownMethod=this._onPointerDown.bind(this),this._pointerMoveMethod=this._onPointerMove.bind(this),this._pointerEnterMethod=this._onPointerEnter.bind(this),this._pointerExitMethod=this._onPointerLeave.bind(this),this._onCompleteMethod=this._onComplete.bind(this)}async _handleWorkerEvent(I){let g=I.data;g.id||("onLoad"===g.method&&g.result.instanceId===this._id&&(await this._updateDotLottieInstanceState(),this._eventManager.dispatch(g.result.event)),"onComplete"===g.method&&g.result.instanceId===this._id&&(await this._updateDotLottieInstanceState(),this._eventManager.dispatch(g.result.event)),"onDestroy"===g.method&&g.result.instanceId===this._id&&this._eventManager.dispatch(g.result.event),"onUnfreeze"===g.method&&g.result.instanceId===this._id&&(await this._updateDotLottieInstanceState(),this._dotLottieInstanceState.isFrozen=!1,this._eventManager.dispatch(g.result.event)),"onFrame"===g.method&&g.result.instanceId===this._id&&(this._dotLottieInstanceState.currentFrame=g.result.event.currentFrame,this._eventManager.dispatch(g.result.event)),"onRender"===g.method&&g.result.instanceId===this._id&&this._eventManager.dispatch(g.result.event),"onFreeze"===g.method&&g.result.instanceId===this._id&&(await this._updateDotLottieInstanceState(),this._eventManager.dispatch(g.result.event)),"onPause"===g.method&&g.result.instanceId===this._id&&(await this._updateDotLottieInstanceState(),this._eventManager.dispatch(g.result.event)),"onPlay"===g.method&&g.result.instanceId===this._id&&(await this._updateDotLottieInstanceState(),this._eventManager.dispatch(g.result.event)),"onStop"===g.method&&g.result.instanceId===this._id&&(await this._updateDotLottieInstanceState(),this._eventManager.dispatch(g.result.event)),"onLoadError"===g.method&&g.result.instanceId===this._id&&(await this._updateDotLottieInstanceState(),this._eventManager.dispatch(g.result.event)),"onReady"===g.method&&g.result.instanceId===this._id&&(await this._updateDotLottieInstanceState(),this._eventManager.dispatch(g.result.event)))}async _create(I){let g;g=this._canvas instanceof HTMLCanvasElement?this._canvas.transferControlToOffscreen():this._canvas;let{instanceId:C}=await this._sendMessage("create",{instanceId:this._id,config:{...I,canvas:g},...R(this._canvas)},[g]);if(C!==this._id)throw new Error("Instance ID mismatch");this._created=!0,await this._updateDotLottieInstanceState()}get isLoaded(){return this._dotLottieInstanceState.isLoaded}get isPlaying(){return this._dotLottieInstanceState.isPlaying}get isPaused(){return this._dotLottieInstanceState.isPaused}get isStopped(){return this._dotLottieInstanceState.isStopped}get currentFrame(){return this._dotLottieInstanceState.currentFrame}get isFrozen(){return this._dotLottieInstanceState.isFrozen}get segmentDuration(){return this._dotLottieInstanceState.segmentDuration}get totalFrames(){return this._dotLottieInstanceState.totalFrames}get segment(){return this._dotLottieInstanceState.segment}get speed(){return this._dotLottieInstanceState.speed}get duration(){return this._dotLottieInstanceState.duration}get isReady(){return this._dotLottieInstanceState.isReady}get mode(){return this._dotLottieInstanceState.mode}get canvas(){return this._canvas}get autoplay(){return this._dotLottieInstanceState.autoplay}get backgroundColor(){return this._dotLottieInstanceState.backgroundColor}get loop(){return this._dotLottieInstanceState.loop}get useFrameInterpolation(){return this._dotLottieInstanceState.useFrameInterpolation}get renderConfig(){return this._dotLottieInstanceState.renderConfig}get manifest(){return this._dotLottieInstanceState.manifest}get activeAnimationId(){return this._dotLottieInstanceState.activeAnimationId}get marker(){return this._dotLottieInstanceState.marker}get activeThemeId(){return this._dotLottieInstanceState.activeThemeId}get layout(){return this._dotLottieInstanceState.layout}async play(){this._created&&(await this._sendMessage("play",{instanceId:this._id}),await this._updateDotLottieInstanceState())}async pause(){this._created&&(await this._sendMessage("pause",{instanceId:this._id}),await this._updateDotLottieInstanceState())}async stop(){this._created&&(await this._sendMessage("stop",{instanceId:this._id}),await this._updateDotLottieInstanceState())}async setSpeed(I){this._created&&(await this._sendMessage("setSpeed",{instanceId:this._id,speed:I}),await this._updateDotLottieInstanceState())}async setMode(I){this._created&&(await this._sendMessage("setMode",{instanceId:this._id,mode:I}),await this._updateDotLottieInstanceState())}async setFrame(I){this._created&&(await this._sendMessage("setFrame",{frame:I,instanceId:this._id}),await this._updateDotLottieInstanceState())}async setSegment(I,g){this._created&&(await this._sendMessage("setSegment",{instanceId:this._id,segment:[I,g]}),await this._updateDotLottieInstanceState())}async setRenderConfig(I){this._created&&(await this._sendMessage("setRenderConfig",{instanceId:this._id,renderConfig:I}),await this._updateDotLottieInstanceState())}async setUseFrameInterpolation(I){this._created&&(await this._sendMessage("setUseFrameInterpolation",{instanceId:this._id,useFrameInterpolation:I}),await this._updateDotLottieInstanceState())}async loadTheme(I){if(!this._created)return!1;let g=this._sendMessage("loadTheme",{instanceId:this._id,themeId:I});return await this._updateDotLottieInstanceState(),g}async load(I){this._created&&(await this._sendMessage("load",{config:I,instanceId:this._id}),await this._updateDotLottieInstanceState())}async setLoop(I){this._created&&(await this._sendMessage("setLoop",{instanceId:this._id,loop:I}),await this._updateDotLottieInstanceState())}async resize(){if(!this._created)return;let{height:I,width:g}=R(this._canvas);this._canvas.width=g,this._canvas.height=I,await this._sendMessage("resize",{height:I,instanceId:this._id,width:g}),await this._updateDotLottieInstanceState()}async destroy(){this._created&&(this._created=!1,await this._sendMessage("destroy",{instanceId:this._id}),this._cleanupStateMachineListeners(),I._workerManager.unassignAnimationFromWorker(this._id),this._eventManager.removeAllEventListeners())}async freeze(){this._created&&(await this._sendMessage("freeze",{instanceId:this._id}),await this._updateDotLottieInstanceState())}async unfreeze(){this._created&&(await this._sendMessage("unfreeze",{instanceId:this._id}),await this._updateDotLottieInstanceState())}async setBackgroundColor(I){this._created&&(await this._sendMessage("setBackgroundColor",{instanceId:this._id,backgroundColor:I}),await this._updateDotLottieInstanceState())}async loadAnimation(I){this._created&&(await this._sendMessage("loadAnimation",{animationId:I,instanceId:this._id}),await this._updateDotLottieInstanceState())}async setLayout(I){this._created&&(await this._sendMessage("setLayout",{instanceId:this._id,layout:I}),await this._updateDotLottieInstanceState())}async _updateDotLottieInstanceState(){if(!this._created)return;let I=await this._sendMessage("getDotLottieInstanceState",{instanceId:this._id});this._dotLottieInstanceState=I.state}markers(){return this._dotLottieInstanceState.markers}async setMarker(I){this._created&&(await this._sendMessage("setMarker",{instanceId:this._id,marker:I}),await this._updateDotLottieInstanceState())}async loadThemeData(I){if(!this._created)return!1;let g=await this._sendMessage("loadThemeData",{instanceId:this._id,themeData:I});return await this._updateDotLottieInstanceState(),g}async setViewport(I,g,C,A){return!!this._created&&this._sendMessage("setViewport",{x:I,y:g,width:C,height:A,instanceId:this._id})}async _sendMessage(I,g,C){let A={id:`dotlottie-request-${H()}`,method:I,params:g};return this._worker.postMessage(A,C||[]),new Promise(((g,C)=>{let i=t=>{let e=t.data;e.id===A.id&&(this._worker.removeEventListener("message",i),e.error?C(new Error(`Failed to execute method ${I}: ${e.error}`)):g(e.result))};this._worker.addEventListener("message",i)}))}addEventListener(I,g){this._eventManager.addEventListener(I,g)}removeEventListener(I,g){this._eventManager.removeEventListener(I,g)}static setWasmUrl(g){I._wasmUrl=g}async loadStateMachine(I){if(!this._created)return!1;let g=await this._sendMessage("loadStateMachine",{instanceId:this._id,stateMachineId:I});return await this._updateDotLottieInstanceState(),g}async loadStateMachineData(I){if(!this._created)return!1;let g=await this._sendMessage("loadStateMachineData",{instanceId:this._id,stateMachineData:I});return await this._updateDotLottieInstanceState(),g}async startStateMachine(){if(!this._created)return!1;this._setupStateMachineListeners();let I=await this._sendMessage("startStateMachine",{instanceId:this._id});return await this._updateDotLottieInstanceState(),I}async stopStateMachine(){return!!this._created&&(this._cleanupStateMachineListeners(),this._sendMessage("stopStateMachine",{instanceId:this._id}))}async postStateMachineEvent(I){return this._created?this._sendMessage("postStateMachineEvent",{event:I,instanceId:this._id}):1}async getStateMachineListeners(){return this._created?this._sendMessage("getStateMachineListeners",{instanceId:this._id}):[]}_getPointerPosition(I){let g=this._canvas.getBoundingClientRect(),C=this._canvas.width/g.width,A=this._canvas.height/g.height,i=this._dotLottieInstanceState.renderConfig.devicePixelRatio||window.devicePixelRatio||1;return{x:(I.clientX-g.left)*C/i,y:(I.clientY-g.top)*A/i}}_onPointerUp(I){let{x:g,y:C}=this._getPointerPosition(I);this.postStateMachineEvent(`OnPointerUp: ${g} ${C}`)}_onPointerDown(I){let{x:g,y:C}=this._getPointerPosition(I);this.postStateMachineEvent(`OnPointerDown: ${g} ${C}`)}_onPointerMove(I){let{x:g,y:C}=this._getPointerPosition(I);this.postStateMachineEvent(`OnPointerMove: ${g} ${C}`)}_onPointerEnter(I){let{x:g,y:C}=this._getPointerPosition(I);this.postStateMachineEvent(`OnPointerEnter: ${g} ${C}`)}_onPointerLeave(I){let{x:g,y:C}=this._getPointerPosition(I);this.postStateMachineEvent(`OnPointerExit: ${g} ${C}`)}_onComplete(){this.postStateMachineEvent("OnComplete")}async _setupStateMachineListeners(){if(d&&this._canvas instanceof HTMLCanvasElement&&this.isLoaded){let I=await this._sendMessage("getStateMachineListeners",{instanceId:this._id});I.includes("PointerUp")&&this._canvas.addEventListener("pointerup",this._pointerUpMethod),I.includes("PointerDown")&&this._canvas.addEventListener("pointerdown",this._pointerDownMethod),I.includes("PointerMove")&&this._canvas.addEventListener("pointermove",this._pointerMoveMethod),I.includes("PointerEnter")&&this._canvas.addEventListener("pointerenter",this._pointerEnterMethod),I.includes("PointerExit")&&this._canvas.addEventListener("pointerleave",this._pointerExitMethod),I.includes("Complete")&&this.addEventListener("complete",this._onCompleteMethod)}}_cleanupStateMachineListeners(){d&&this._canvas instanceof HTMLCanvasElement&&(this._canvas.removeEventListener("pointerup",this._pointerUpMethod),this._canvas.removeEventListener("pointerdown",this._pointerDownMethod),this._canvas.removeEventListener("pointermove",this._pointerMoveMethod),this._canvas.removeEventListener("pointerenter",this._pointerEnterMethod),this._canvas.removeEventListener("pointerleave",this._pointerExitMethod),this.removeEventListener("complete",this._onCompleteMethod))}};a(k,"_workerManager",new class{constructor(){a(this,"_workers",new Map),a(this,"_animationWorkerMap",new Map)}getWorker(I){return this._workers.has(I)||this._workers.set(I,new X),this._workers.get(I)}assignAnimationToWorker(I,g){this._animationWorkerMap.set(I,g)}unassignAnimationFromWorker(I){this._animationWorkerMap.delete(I)}sendMessage(I,g,C){this.getWorker(I).postMessage(g,C||[])}terminateWorker(I){let g=this._workers.get(I);g&&(g.terminate(),this._workers.delete(I))}}),a(k,"_wasmUrl","");const F=JSON.parse('{"UU":"prolific/lottie-js"}');(0,I.registerBlockType)(F.UU,{edit:function({attributes:I,setAttributes:e}){const{lottieFile:o,loop:a,autoplay:l,speed:n}=I,s=(0,A.useBlockProps)(),d=(0,t.useRef)(null),[c,G]=(0,t.useState)(null);return e({blockId:s.id}),console.log(l),(0,t.useEffect)((()=>{if(!d.current||!o)return;const I=new w({autoplay:l,loop:a,canvas:d.current,src:o,speed:n});return G(I),()=>{I.destroy(),G(null)}}),[o]),(0,t.useEffect)((()=>{c&&(c.setSpeed(n),c.setLoop(a),l?c.play():c.pause())}),[c,l,a,n]),(0,g.createElement)(g.Fragment,null,(0,g.createElement)("div",{...s},(0,g.createElement)("canvas",{ref:d})),(0,g.createElement)(A.InspectorControls,null,(0,g.createElement)(i.PanelBody,{title:(0,C.__)("Lottie Settings","prolific-blocks")},(0,g.createElement)(A.MediaUploadCheck,null,(0,g.createElement)(A.MediaUpload,{onSelect:I=>e({lottieFile:I.url}),allowedTypes:["application/json"],render:({open:I})=>(0,g.createElement)(i.Button,{onClick:I,variant:"primary",style:{marginBottom:"20px"}},o?(0,C.__)("Replace JSON","prolific-blocks"):(0,C.__)("Upload JSON","prolific-blocks"))})),(0,g.createElement)(i.ToggleControl,{label:(0,C.__)("Autoplay","prolific-blocks"),checked:l,onChange:I=>e({autoplay:I})}),(0,g.createElement)(i.ToggleControl,{label:(0,C.__)("Loop","prolific-blocks"),checked:a,onChange:I=>e({loop:I})}),(0,g.createElement)(i.RangeControl,{label:(0,C.__)("Speed","prolific-blocks"),value:n,onChange:I=>e({speed:I}),min:1,max:10,step:.1}))))},save:function(){return(0,g.createElement)(A.InnerBlocks.Content,null)}})}},C={};function A(I){var i=C[I];if(void 0!==i)return i.exports;var t=C[I]={exports:{}};return g[I](t,t.exports,A),t.exports}A.m=g,I=[],A.O=(g,C,i,t)=>{if(!C){var e=1/0;for(n=0;n<I.length;n++){for(var[C,i,t]=I[n],o=!0,a=0;a<C.length;a++)(!1&t||e>=t)&&Object.keys(A.O).every((I=>A.O[I](C[a])))?C.splice(a--,1):(o=!1,t<e&&(e=t));if(o){I.splice(n--,1);var l=i();void 0!==l&&(g=l)}}return g}t=t||0;for(var n=I.length;n>0&&I[n-1][2]>t;n--)I[n]=I[n-1];I[n]=[C,i,t]},A.o=(I,g)=>Object.prototype.hasOwnProperty.call(I,g),(()=>{var I={739:0,619:0};A.O.j=g=>0===I[g];var g=(g,C)=>{var i,t,[e,o,a]=C,l=0;if(e.some((g=>0!==I[g]))){for(i in o)A.o(o,i)&&(A.m[i]=o[i]);if(a)var n=a(A)}for(g&&g(C);l<e.length;l++)t=e[l],A.o(I,t)&&I[t]&&I[t][0](),I[t]=0;return A.O(n)},C=globalThis.webpackChunkprolific_blocks=globalThis.webpackChunkprolific_blocks||[];C.forEach(g.bind(null,0)),C.push=g.bind(null,C.push.bind(C))})();var i=A.O(void 0,[619],(()=>A(608)));i=A.O(i)})();